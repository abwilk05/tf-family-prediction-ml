import torch
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import confusion_matrix
import seaborn as sns
from captum.attr import IntegratedGradients
from torch.utils.data import DataLoader
import torch.nn.functional as F
import logomaker as lm
from scipy.stats import entropy
import matplotlib.ticker as ticker
from scipy import stats
from statannot import add_stat_annotation
import matplotlib.patches as mpatches
from scipy.stats import linregress, pearsonr, spearmanr

def accuracy():

    cv5_acc = [0.8108747044917257, 0.83451536643026, 0.8014184397163121, 0.8127962085308057, 0.7890995260663507]
    cv5_f1 = [0.7917502232439723, 0.8094111279170143, 0.7761743811625819, 0.7238511090391142, 0.7648464267214267]
    cv10_acc = [0.7971698113207547, 0.8915094339622641, 0.8490566037735849, 0.8009478672985783, 0.7962085308056872, 0.8483412322274881, 0.8293838862559242, 0.7867298578199052, 0.8009478672985783, 0.8009478672985783]
    cv10_f1 =[0.7914444420313985, 0.9018581210078487, 0.8107070249387386, 0.757108157728637, 0.7573996147169522, 0.8053306360130155, 0.8507540897429846, 0.7060287059519423, 0.7435242133255928, 0.721126888207212]
    cv20_acc = [0.7641509433962265, 0.8113207547169812, 0.8679245283018868, 0.8584905660377359, 0.8207547169811321, 0.8018867924528302, 0.8301886792452831, 0.8113207547169812, 0.8018867924528302, 0.8207547169811321, 0.8018867924528302, 0.8584905660377359, 0.7641509433962265, 0.8476190476190476, 0.780952380952381, 0.8380952380952381, 0.7619047619047619, 0.8857142857142857, 0.8380952380952381, 0.8857142857142857]
    cv20_f1 = [0.6773371998372, 0.7848587114950496, 0.8326143753568319, 0.7476059234882764, 0.6987692676547166, 0.7781819242848655, 0.7409392433076645, 0.7668191438704943, 0.7785322560109087, 0.8116260531583113, 0.8015114769990932, 0.7812908649321693, 0.7340280404069586, 0.797227923412134, 0.6265744631185808, 0.7822606372606373, 0.7076661951739351, 0.8692623604465709, 0.7287801624898399, 0.8319841269841269]

    pcc_acc = 0.8296261239943209
    pcc_f1 = 0.7584345865157859
    euclid_acc = 0.8400378608613346
    euclid_f1 = 0.7634786332363314
    sw_acc = 0.836251774727875
    sw_f1 = 0.7617997705664651
    ensemble_acc = 0.8419309039280644
    ensemble_f1 = 0.7654116199496412

    fig, ax = plt.subplots(figsize=(4, 4.5))

    heights = [np.mean(cv5_acc),np.mean(cv10_acc),np.mean(cv20_acc),pcc_acc,euclid_acc,sw_acc,ensemble_acc]
    
    y_errs = [np.std(cv5_acc),np.std(cv10_acc),np.std(cv20_acc),0,0,0,0]
    x_pos = range(1,8)
    colors = ['#e41a1c']*3 + ['#377eb8']*4
    labels = ['CV_5fold','CV_10fold','CV_20fold','PCC','Euclidean dist.','SW similarity','KNN Ensemble']

    bars = ax.bar(x_pos, heights, color=colors, yerr=y_errs, capsize=5)
    ax.set_ylim(0.7,0.925)
    ax.set_xticks([1,2,3,4,5,6,7])
    ax.set_xticklabels(labels, rotation=45, ha='right', rotation_mode='anchor', fontsize=10)

    plt.tight_layout()
    plt.show()

    fig, ax = plt.subplots(figsize=(4, 4.5))

    heights = [np.mean(cv5_f1),np.mean(cv10_f1),np.mean(cv20_f1),pcc_f1,euclid_f1,sw_f1,ensemble_f1]
    
    y_errs = [np.std(cv5_f1),np.std(cv10_f1),np.std(cv20_f1),0,0,0,0]
    x_pos = range(1,8)
    colors = ['#e41a1c']*3 + ['#377eb8']*4
    labels = ['CV_5fold','CV_10fold','CV_20fold','PCC','Euclidean dist.','SW similarity','KNN Ensemble']

    bars = ax.bar(x_pos, heights, color=colors, yerr=y_errs, capsize=5)
    ax.set_ylim(0.7,0.925)
    ax.set_xticks([1,2,3,4,5,6,7])
    ax.set_xticklabels(labels, rotation=45, ha='right', rotation_mode='anchor', fontsize=10)

    plt.tight_layout()
    plt.show()
    

def time():

    cv5 = 1.621433973312378
    cv10 = 1.6016438007354736
    cv20 = 1.5355467796325684
    pcc = 3576
    euclid = 2096
    sw = 1990
    ensemble = 7653

    heights = [cv5,cv10,cv20,pcc,euclid,sw,ensemble]
    x_pos = range(1,8)
    labels = ['CV_5fold','CV_10fold','CV_20fold','PCC','Euclidean dist.','SW similarity','KNN Ensemble']
    colors = ['#e41a1c']*3 + ['#377eb8']*4

    fig, ax = plt.subplots(figsize=(4, 4.5))

    bars = ax.bar(x_pos, heights, color=colors)
    ax.set_yscale('log')
    ax.set_xticks(range(1,8))
    ax.set_xticklabels(labels, rotation=45, ha='right', rotation_mode='anchor', fontsize=10)
    plt.tight_layout()
    plt.show()

def class_accuracy(fams,id_to_fam):

    cv5_acc = [0.92, 0.712166172106825, 0.7566371681415929, 0.9502487562189055, 0.8666666666666667, 0.8495575221238938, 0.8392857142857143, 0.7263157894736842, 0.7127659574468085, 0.7931034482758621, 0.5625, 0.6585365853658537, 0.9473684210526315, 0.9459459459459459, 0.7333333333333333, 0.9230769230769231, 0.5384615384615384, 0.7727272727272727, 0.4, 0.8]
    cv10_acc = [0.9306666666666666, 0.7091988130563798, 0.7477876106194691, 0.9402985074626866, 0.8727272727272727, 0.8938053097345132, 0.8125, 0.7684210526315789, 0.776595744680851, 0.8505747126436781, 0.6458333333333334, 0.7073170731707317, 0.8947368421052632, 0.8918918918918919, 0.8, 0.9615384615384616, 0.5384615384615384, 0.7272727272727273, 0.5, 0.75]
    cv20_acc =  [0.8853333333333333, 0.712166172106825, 0.7610619469026548, 0.9303482587064676, 0.9151515151515152, 0.9026548672566371, 0.875, 0.8421052631578947, 0.8085106382978723, 0.8275862068965517, 0.625, 0.7560975609756098, 0.868421052631579, 0.8378378378378378, 0.8, 0.9615384615384616, 0.6923076923076923, 0.6363636363636364, 0.5, 0.6]
    ensemble_acc =  [0.9626666666666667, 0.6468842729970327, 0.8938053097345132, 0.9104477611940298, 0.8848484848484849, 0.9823008849557522, 0.9107142857142857, 0.8421052631578947, 0.9468085106382979, 0.8620689655172413, 0.6875, 0.8048780487804879, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.8076923076923077, 0.9545454545454546, 0.8, 0.8]
    euclid_acc =  [0.96, 0.6617210682492581, 0.8805309734513275, 0.8955223880597015, 0.8848484848484849, 0.9823008849557522, 0.9285714285714286, 0.8105263157894737, 0.9574468085106383, 0.8620689655172413, 0.6666666666666666, 0.7560975609756098, 0.4473684210526316, 0.0, 0.9, 1.0, 0.8846153846153846, 0.9545454545454546, 0.8, 0.85]
    pcc_acc = [0.9386666666666666, 0.6439169139465876, 0.8761061946902655, 0.9054726368159204, 0.8424242424242424, 0.9823008849557522, 0.8839285714285714, 0.8526315789473684, 0.9468085106382979, 0.8620689655172413, 0.6458333333333334, 0.8536585365853658, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.7692307692307693, 0.9545454545454546, 0.7, 0.85]
    sw_acc = [0.9626666666666667, 0.6379821958456974, 0.8938053097345132, 0.9054726368159204, 0.8727272727272727, 0.9469026548672567, 0.9107142857142857, 0.8421052631578947, 0.9468085106382979, 0.8390804597701149, 0.6458333333333334, 0.8536585365853658, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.8076923076923077, 0.9545454545454546, 0.8, 0.8]
    
    x_pos = range(0,59)

    heights = [np.mean([cv5_acc[0],cv10_acc[0],cv20_acc[0]]), np.mean([ensemble_acc[0],euclid_acc[0],pcc_acc[0],sw_acc[0]])]
    for i in range(1,20):
        heights += [0, np.mean([cv5_acc[i],cv10_acc[i],cv20_acc[i]]), np.mean([ensemble_acc[i],euclid_acc[i],pcc_acc[i],sw_acc[i]])]
    
    yerrs = [np.std([cv5_acc[0],cv10_acc[0],cv20_acc[0]]), np.std([ensemble_acc[0],euclid_acc[0],pcc_acc[0],sw_acc[0]])]
    for i in range(1,20):
        yerrs += [0, np.std([cv5_acc[i],cv10_acc[i],cv20_acc[i]]), np.std([ensemble_acc[i],euclid_acc[i],pcc_acc[i],sw_acc[i]])]

    colors = ['#e41a1c','#377eb8'] + ['white','#e41a1c','#377eb8']*19

    fig, ax = plt.subplots(figsize=(14, 5))

    bars = ax.bar(x_pos, heights, color=colors, yerr=yerrs, capsize=2)
    labels = [id_to_fam[i] for i in range(0,20)]
    xticks = range(0,60,3)
    xticks = [i + 0.5 for i in xticks]
    ax.set_ylim(0.5,1.05)
    ax.set_xticks(xticks)
    ax.set_xticklabels(labels, rotation=45, ha='right', rotation_mode='anchor', fontsize=10)
    
    plt.tight_layout()

    plt.show()

def size_acc_corr(fams):

    from collections import Counter
    
    cv5_acc = [0.92, 0.712166172106825, 0.7566371681415929, 0.9502487562189055, 0.8666666666666667, 0.8495575221238938, 0.8392857142857143, 0.7263157894736842, 0.7127659574468085, 0.7931034482758621, 0.5625, 0.6585365853658537, 0.9473684210526315, 0.9459459459459459, 0.7333333333333333, 0.9230769230769231, 0.5384615384615384, 0.7727272727272727, 0.4, 0.8]
    cv10_acc = [0.9306666666666666, 0.7091988130563798, 0.7477876106194691, 0.9402985074626866, 0.8727272727272727, 0.8938053097345132, 0.8125, 0.7684210526315789, 0.776595744680851, 0.8505747126436781, 0.6458333333333334, 0.7073170731707317, 0.8947368421052632, 0.8918918918918919, 0.8, 0.9615384615384616, 0.5384615384615384, 0.7272727272727273, 0.5, 0.75]
    cv20_acc =  [0.8853333333333333, 0.712166172106825, 0.7610619469026548, 0.9303482587064676, 0.9151515151515152, 0.9026548672566371, 0.875, 0.8421052631578947, 0.8085106382978723, 0.8275862068965517, 0.625, 0.7560975609756098, 0.868421052631579, 0.8378378378378378, 0.8, 0.9615384615384616, 0.6923076923076923, 0.6363636363636364, 0.5, 0.6]
    ensemble_acc =  [0.9626666666666667, 0.6468842729970327, 0.8938053097345132, 0.9104477611940298, 0.8848484848484849, 0.9823008849557522, 0.9107142857142857, 0.8421052631578947, 0.9468085106382979, 0.8620689655172413, 0.6875, 0.8048780487804879, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.8076923076923077, 0.9545454545454546, 0.8, 0.8]
    euclid_acc =  [0.96, 0.6617210682492581, 0.8805309734513275, 0.8955223880597015, 0.8848484848484849, 0.9823008849557522, 0.9285714285714286, 0.8105263157894737, 0.9574468085106383, 0.8620689655172413, 0.6666666666666666, 0.7560975609756098, 0.4473684210526316, 0.0, 0.9, 1.0, 0.8846153846153846, 0.9545454545454546, 0.8, 0.85]
    pcc_acc = [0.9386666666666666, 0.6439169139465876, 0.8761061946902655, 0.9054726368159204, 0.8424242424242424, 0.9823008849557522, 0.8839285714285714, 0.8526315789473684, 0.9468085106382979, 0.8620689655172413, 0.6458333333333334, 0.8536585365853658, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.7692307692307693, 0.9545454545454546, 0.7, 0.85]
    sw_acc = [0.9626666666666667, 0.6379821958456974, 0.8938053097345132, 0.9054726368159204, 0.8727272727272727, 0.9469026548672567, 0.9107142857142857, 0.8421052631578947, 0.9468085106382979, 0.8390804597701149, 0.6458333333333334, 0.8536585365853658, 0.47368421052631576, 0.0, 0.9333333333333333, 1.0, 0.8076923076923077, 0.9545454545454546, 0.8, 0.8]

    counter = Counter(fams)
    counts = np.array([count for item, count in counter.most_common()])
    
    dl = []
    knn = []
    for i in range(0,20):
        dl.append(np.mean([cv5_acc[i],cv10_acc[i],cv20_acc[i]]))
        knn.append(np.mean([ensemble_acc[i],euclid_acc[i],pcc_acc[i],sw_acc[i]]))
    
    fig, ax = plt.subplots(figsize=(4, 4.5))

    ax.scatter(counts,dl,color='#e41a1c')
    ax.scatter(counts,knn,color='#377eb8')

    slope1, intercept1, r_value1, p_value1, std_err1 = linregress(counts, dl)
    line1 = slope1 * counts + intercept1
    slope2, intercept2, r_value2, p_value2, std_err2 = linregress(counts, knn)
    line2 = slope2 * counts + intercept2

    ax.plot(counts, line1, '-', color='#e41a1c', label=f'Deep Learning (r = {r_value1:.2f})')
    ax.plot(counts, line2, '-', color='#377eb8', label=f'Tomtom-KNN (r = {r_value1:.2f})')

    ax.set_ylim(0.4,1.1)
    ax.legend(loc='lower right')

    plt.tight_layout()
    plt.show()
